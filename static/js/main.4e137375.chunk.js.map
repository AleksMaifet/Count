{"version":3,"sources":["Caunt/counter.module.css","Caunt/button.tsx","Caunt/input.tsx","SetCounter/InputSettings.tsx","SetCounter/Setteng.tsx","SetCounter/localstorage.tsx","reducer/reducerCaunt.ts","Caunt/countValue.tsx","Caunt/counter.tsx","App.tsx","reportWebVitals.ts","Redux/Redux.ts","index.tsx"],"names":["module","exports","Button","React","memo","props","className","s","button","onClick","callback","disabled","title","Input","labelValue","value","classError","type","onChange","e","InputSettings","counter","maxValueHandler","startValueHandler","error","errorStartValue","errorStartValueHandler","textCounter","maxValue","startValue","Setting","startValueStorageHandler","set","setDisabledBTN","wrapper","buttonWrapper","saveState","key","state","stateAsString","JSON","stringify","localStorage","setItem","restoreState","defaultState","getItem","parse","initialization","startCount","countAC","number","incResetBTNDisableAC","boolean","setBTNDisableAC","CountBody","colorCount","counterValuesHandler","CounterBody","dispatch","useDispatch","inc","reset","App","useSelector","countPage","errorValue","enterValue","cuant","textCounterInput","textStartInput","couterBody","Number","currentTarget","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e137375.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"counter_wrapper__2z5aJ\",\"buttonWrapper\":\"counter_buttonWrapper__W6Iov\",\"button\":\"counter_button__cgxfP\",\"cuant\":\"counter_cuant__3CEuh\",\"couterBody\":\"counter_couterBody__1VmaT\",\"textCounter\":\"counter_textCounter__1zofz\",\"textCounterInput\":\"counter_textCounterInput__2Wtkg\",\"textStartInput\":\"counter_textStartInput__1j1AC\",\"enterValue\":\"counter_enterValue__3_kiJ\",\"errorValue\":\"counter_errorValue__DhFsO\"};","import s from \"./counter.module.css\";\r\nimport React from \"react\";\r\n\r\ntype ButtonType = {\r\n\tcallback: () => void\r\n\ttitle:string\r\n\tdisabled:boolean\r\n}\r\n\r\n\r\nexport const Button = React.memo(function Button (props:ButtonType ) {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<button className={s.button} onClick={props.callback} disabled={props.disabled}>{props.title}</button>\r\n\t\t</div>\r\n\t)\r\n})\r\n\r\n\r\n","import React, {ChangeEvent} from \"react\";\r\n\r\n\r\ntype InputType = {\r\n\tlabelValue: string\r\n\tcallback: (e: ChangeEvent<HTMLInputElement>) => void\r\n\tvalue: number\r\n\tclassError: string\r\n}\r\n\r\nexport const Input = React.memo(function Input({labelValue, callback, value, classError}: InputType){\r\n\tconst OnchangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tcallback(e)\r\n\t}\r\n\treturn <label>{labelValue} <input type={'number'} onChange={OnchangeHandler} value={value} className={classError}/>\r\n\t</label>\r\n})","import React, {ChangeEvent} from \"react\";\r\nimport s from '../Caunt/counter.module.css';\r\nimport {Input} from \"../Caunt/input\";\r\nimport {CounterType} from \"../reducer/reducerCaunt\";\r\n\r\n\r\ntype InputSettingsType = {\r\n\tcounter: CounterType\r\n\tmaxValueHandler: (e:any) => void\r\n\tstartValueHandler: (e:any) => void\r\n\terror: string\r\n\terrorStartValue: string\r\n}\r\n\r\nexport const InputSettings = React.memo(function InputSettings({counter,maxValueHandler,startValueHandler,error,errorStartValue}: InputSettingsType) {\r\n\tconst maxValueCallbackHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tmaxValueHandler(e);\r\n\t};\r\n\tconst startValueCallbackHadnler = (e: ChangeEvent<HTMLInputElement>) => {\r\n\t\tstartValueHandler(e);\r\n\t};\r\n\tconst errorStartValueHandler = error || errorStartValue;\r\n\r\n\r\n\treturn (\r\n\t\t<div className={s.textCounter}>\r\n\t\t\t<Input labelValue={'max value:'} callback={maxValueCallbackHandler} value={counter.maxValue} classError={error}/>\r\n\t\t\t<Input labelValue={'start value:'} callback={startValueCallbackHadnler} value={counter.startValue}\r\n\t\t\t\t\t\t classError={errorStartValueHandler}/>\r\n\t\t</div>\r\n\t)\r\n})","import s from \"../Caunt/counter.module.css\";\r\nimport {Button} from \"../Caunt/button\";\r\nimport React from \"react\";\r\nimport {InputSettings} from \"./InputSettings\";\r\nimport {CounterType} from \"../reducer/reducerCaunt\";\r\n\r\n\r\ntype SettingType = {\r\n\tcounter:CounterType\r\n\tmaxValueHandler:(e:any) => void\r\n\tstartValueHandler:(e:any) => void\r\n\tstartValueStorageHandler: () => void\r\n\terror: string\r\n\terrorStartValue: string\r\n}\r\n\r\nexport const Setting = React.memo(function Setting ({counter,startValueStorageHandler,...props}: SettingType)  {\r\n\tconst setValue = 'set';\r\n\tconst startValueStorage = () => {\r\n\t\tstartValueStorageHandler()\r\n\t};\r\n\tconst set = counter.startValue < 0 || counter.startValue >= counter.maxValue || counter.setDisabledBTN;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className={s.wrapper}>\r\n\t\t\t\t<InputSettings error={props.error} errorStartValue={props.errorStartValue} maxValueHandler={props.maxValueHandler} startValueHandler={props.startValueHandler} counter={counter}/>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.buttonWrapper}>\r\n\t\t\t\t<Button title={setValue} callback={startValueStorage} disabled={set}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})","\r\nexport function saveState(key: string, state:number) {\r\n\tconst stateAsString = JSON.stringify(state)\r\n\tlocalStorage.setItem(key, stateAsString )\r\n}\r\n\r\nexport function restoreState(key: string, defaultState: number) {\r\n\tlet state = defaultState\r\n\tconst stateAsString = localStorage.getItem(key)\r\n\tif (stateAsString !== null) state = JSON.parse(stateAsString) as number\r\n\treturn state\r\n}\r\n","import {restoreState} from \"../SetCounter/localstorage\";\r\n\r\nconst startNumber = 0;\r\nconst maxNumber = 5;\r\n\r\nexport type CounterType = {\r\n\tstartCount: number\r\n\tmaxValue: number\r\n\tstartValue: number\r\n\tdisabled: boolean\r\n\tsetDisabledBTN: boolean\r\n}\r\n\r\nconst initialization:CounterType = {\r\n\tstartCount: restoreState('start-value', startNumber),\r\n\tmaxValue: restoreState('maxvalue-value', maxNumber),\r\n\tstartValue: restoreState('start-value', startNumber),\r\n\tdisabled: false,\r\n\tsetDisabledBTN: true\r\n}\r\n\r\n\r\nexport const ReducerCount = (state = initialization, action:CountHandlerTypes):CounterType => {\r\n\tswitch(action.type){\r\n\t\tcase \"COUNT\":\r\n\t\t\treturn {...state,startCount: action.number}\r\n\t\tcase \"MAX-VALUE\":\r\n\t\t\treturn {...state,maxValue: action.number}\r\n\t\tcase \"START-VALUE\":\r\n\t\t\treturn {...state,startValue: action.number}\r\n\t\tcase \"INC-RES-DISABLE\":\r\n\t\t\treturn {...state,disabled: action.boolean}\r\n\t\tcase \"SET-DISABLE\":\r\n\t\t\treturn {...state,setDisabledBTN: action.boolean}\r\n\t\tdefault: return state\r\n\t}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport type CountHandlerTypes = CountACType | MaxValueType | StartValueACType | IncResetBTNDisableACType | SetBTNDisableACType\r\n\r\nexport type CountACType = ReturnType<typeof countAC>\r\n\r\nexport const countAC = (number:number) => {\r\n\treturn {\r\n\t\ttype: 'COUNT',\r\n\t\tnumber\r\n\t} as const\r\n}\r\nexport type MaxValueType = ReturnType<typeof maxValueAC>\r\n\r\nexport const maxValueAC = (number:number) => {\r\n\treturn {\r\n\t\ttype: 'MAX-VALUE',\r\n\t\tnumber\r\n\t} as const\r\n}\r\nexport type StartValueACType = ReturnType<typeof startValueAC>\r\n\r\nexport const startValueAC = (number:number) => {\r\n\treturn {\r\n\t\ttype: 'START-VALUE',\r\n\t\tnumber\r\n\t} as const\r\n}\r\n\r\nexport type IncResetBTNDisableACType = ReturnType<typeof incResetBTNDisableAC>\r\n\r\nexport const incResetBTNDisableAC = (boolean:boolean) => {\r\n\treturn {\r\n\t\ttype: 'INC-RES-DISABLE',\r\n\t\tboolean\r\n\t} as const\r\n}\r\n\r\nexport type SetBTNDisableACType = ReturnType<typeof setBTNDisableAC>\r\n\r\nexport const setBTNDisableAC = (boolean:boolean) => {\r\n\treturn {\r\n\t\ttype: 'SET-DISABLE',\r\n\t\tboolean\r\n\t} as const\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\ntype CountBaseType = {\r\n\tcounterValuesHandler:  number | JSX.Element\r\n\tcolorCount:string\r\n}\r\n\r\n\r\nexport const CountBody = React.memo(function CoutBody({colorCount,counterValuesHandler}: CountBaseType) {\r\n\r\n\treturn <div className={colorCount}>{counterValuesHandler}</div>\r\n})","import React from \"react\";\r\nimport s from './counter.module.css';\r\nimport {Button} from \"./button\";\r\nimport {CountBody} from \"./countValue\";\r\nimport {restoreState} from \"../SetCounter/localstorage\";\r\nimport {countAC, CounterType} from \"../reducer/reducerCaunt\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype CounterBodyType = {\r\n\tcounterValuesHandler: number | JSX.Element\r\n\tcolorCount: string\r\n\tcounter: CounterType\r\n}\r\n\r\n\r\nexport const CounterBody = React.memo(function Counter({counter,counterValuesHandler,colorCount}: CounterBodyType)  {\r\n\tconst dispatch = useDispatch()\r\n\tconst incPlus = () => {\r\n\t\tif (counter.startCount < counter.maxValue) dispatch(countAC(counter.startCount + 1))\r\n\t};\r\n\tconst resetCount = () => dispatch(countAC(restoreState('start-value', counter.startCount)));\r\n\tconst incValue = 'inc';\r\n\tconst resetValue = 'reset';\r\n\tconst inc = counter.startCount === counter.maxValue || counter.disabled;\r\n\tconst reset = counter.disabled;\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div className={s.wrapper}>\r\n\t\t\t\t<CountBody colorCount={colorCount} counterValuesHandler={counterValuesHandler}/>\r\n\t\t\t</div>\r\n\t\t\t<div className={s.buttonWrapper}>\r\n\t\t\t\t<Button title={incValue} callback={incPlus} disabled={inc}/>\r\n\t\t\t\t<Button title={resetValue} callback={resetCount} disabled={reset}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n})","import React, {ChangeEvent} from 'react';\nimport './App.css';\nimport {Setting} from \"./SetCounter/Setteng\";\nimport s from './Caunt/counter.module.css';\nimport {restoreState, saveState} from \"./SetCounter/localstorage\";\nimport {\n\tcountAC, CounterType,\n\tincResetBTNDisableAC,\n\tmaxValueAC,\n\tsetBTNDisableAC,\n\tstartValueAC\n} from \"./reducer/reducerCaunt\";\nimport {CounterBody} from \"./Caunt/counter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {rootReducersType} from \"./Redux/Redux\";\n\n\n\nfunction App() {\n\tconst counter = useSelector<rootReducersType,CounterType>(state => state.countPage)\n\tconst dispatch = useDispatch()\n\n // counter boyd + counter color\n\tconst counterValuesHandler = counter.maxValue <= counter.startValue || counter.startValue < 0\n\t\t\t? <div className={s.errorValue}>Incorrect value!</div>\n\t\t\t: counter.disabled\n\t\t\t\t? <div className={s.enterValue}>enter values and press \"set\"</div>\n\t\t\t\t: counter.startCount;\n\tconst colorCount = counter.startCount === counter.maxValue || counter.maxValue <= counter.startValue || counter.startValue < 0 ? s.cuant : '';\n\tconst error = counter.startValue >= counter.maxValue ? s.textCounterInput : '';\n\tconst errorStartValue = counter.startValue < 0 ? s.textStartInput : '';\n\n\t// first body counter\n\tconst startValueStorageHandler = () => {\n\t\tsaveState('maxvalue-value', counter.maxValue);\n\t\tsaveState('start-value', counter.startValue);\n\t\tdispatch(countAC(restoreState('start-value', 0)));\n\t\tdispatch(setBTNDisableAC(true));\n\t\tdispatch(incResetBTNDisableAC(false));\n\t};\n\n\t// change max and start values\n\tconst maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tdispatch(maxValueAC(Number(e.currentTarget.value)));\n\t\tdispatch(setBTNDisableAC(false));\n\t\tdispatch(incResetBTNDisableAC(true));\n\n\t};\n\tconst startValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\n\t\tdispatch(startValueAC(Number(e.currentTarget.value)));\n\t\tdispatch(setBTNDisableAC(false));\n\t\tdispatch(incResetBTNDisableAC(true));\n\t};\n\n\n\treturn (\n\t\t<div className={s.couterBody}>\n\t\t\t<CounterBody colorCount={colorCount} counterValuesHandler={counterValuesHandler} counter={counter}/>\n\t\t\t<Setting error={error} errorStartValue={errorStartValue} startValueStorageHandler={startValueStorageHandler} counter={counter} maxValueHandler={maxValueHandler} startValueHandler={startValueHandler}/>\n\t\t</div>\n\t);\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {ReducerCount} from \"../reducer/reducerCaunt\";\r\n\r\n\r\n\r\n\r\nexport const rootReducers = combineReducers({\r\n\t\t\tcountPage : ReducerCount\r\n})\r\n\r\nexport type rootReducersType = ReturnType<typeof rootReducers>\r\n\r\nexport const store = createStore(rootReducers)","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./Redux/Redux\";\n\nReactDOM.render(<Provider store={store}><App /></Provider> ,  document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}